version: '3'

vars:
  entities: [board]
  service: "boardService"

dotenv: ['local.env']

tasks:
  create-structure:
    desc: Создать структуру папок на основе переменных
    cmds:
      - for:
          var: entities
        cmd: |
          mkdir -p "api/{{.ITEM}}_v1"
          mkdir -p "cmd"
          mkdir -p "internal/api/{{.ITEM}}"
          mkdir -p "internal/app"
          mkdir -p "internal/config/env"
          mkdir -p "internal/converter"
          mkdir -p "internal/model"
          mkdir -p "internal/interceptor"
          mkdir -p "internal/repository/{{.ITEM}}/model"
          mkdir -p "internal/repository/{{.ITEM}}/converter"
          mkdir -p "internal/service/{{.ITEM}}"
          mkdir -p "internal/utils"
          mkdir -p "migrations"
          mkdir -p "pkg"
          
          touch "cmd/main.go"
          touch "api/{{.ITEM}}_v1/{{.ITEM}}.proto"
          touch "internal/api/{{.ITEM}}/service.go"
          touch "internal/app/app.go"
          touch "internal/app/service_provider.go"
          
          touch "internal/interceptor/logger.go"
          touch "internal/interceptor/validate.go"
          
          touch "internal/config/config.go"
          touch "internal/config/env/grpc.go"
          touch "internal/config/env/pg.go"
          
          touch "internal/repository/repository.go"
          touch "internal/repository/{{.ITEM}}/model/{{.ITEM}}.go"
          touch "internal/repository/{{.ITEM}}/converter/{{.ITEM}}.go"
          
          touch "internal/service/service.go"
          touch "internal/service/{{.ITEM}}/service.go"
          
          touch "internal/model/{{.ITEM}}.go"
          touch "internal/converter/{{.ITEM}}.go"

  install-deps:
    desc: Установка зависимостей
    cmds:
      - go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.36.3
      - go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.5.1
      - go install github.com/envoyproxy/protoc-gen-validate@v1.2.1
      - go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@v2.26.0
      - go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2
      - go install github.com/pressly/goose/v3/cmd/goose@v3.24.1
      - go install github.com/rakyll/statik@v0.1.7

  # Задача для получения зависимостей
  get-deps:
    desc: Получение зависимостей
    cmds:
      - go get -u google.golang.org/protobuf/cmd/protoc-gen-go
      - go get -u google.golang.org/grpc/cmd/protoc-gen-go-grpc

  # Задача для проверки состояния миграции
  local-migration-status:
    desc: Проверка состояния миграции
    cmds:
      - goose -dir {{.MIGRATION_DIR}} postgres "{{.MIGRATION_DSN}}" status -v

  # Задача для применения миграции
  local-migration-up:
    desc: Применение миграции
    cmds:
      - goose -dir $MIGRATION_DIR postgres "$MIGRATION_DSN" up -v

  # Задача для отката миграции
  local-migration-down:
    desc: Откат миграции
    cmds:
      - goose -dir $MIGRATION_DIR postgres "$MIGRATION_DSN" down -v

  # Задача для запуска тестов
  test:
    desc: Запуск тестов
    cmds:
      - go clean -testcache
      - go test ./... -v -coverpkg=github.com/astronely/financial-helper_microservices/$service/internal/api/...,github.com/astronely/financial-helper_microservices/$service/internal/service/...

  # Задача для проверки покрытия тестами
  test-coverage:
    desc: Проверка покрытия тестами
    cmds:
      - go clean -testcache
      - go test ./... -coverprofile=coverage.tmp.out -covermode count -coverpkg=github.com/astronely/financial-helper_microservices/$service/internal/api/...,github.com/astronely/financial-helper_microservices/$service/internal/service/...
      - grep -v 'mocks\|config' coverage.tmp.out > coverage.out
      - rm coverage.tmp.out
      - go tool cover -html=coverage.out
      - go tool cover -func=./coverage.out | grep "total"
      - grep -sqFx "/coverage.out" .gitignore || echo "/coverage.out" >> .gitignore

  # Задача для генерации API
  generate:
    desc: Генерация API
    cmds:
      - for:
          var: entities
        cmd: |
          mkdir -p pkg/{{.ITEM}}_v1
          protoc --proto_path api/{{.ITEM}}_v1 --proto_path vendor.protogen \
            --go_out=pkg/{{.ITEM}}_v1 --go_opt=paths=source_relative \
            --go-grpc_out=pkg/{{.ITEM}}_v1 --go-grpc_opt=paths=source_relative \
            --validate_out lang=go:pkg/{{.ITEM}}_v1 --validate_opt=paths=source_relative \
            api/{{.ITEM}}_v1/{{.ITEM}}.proto